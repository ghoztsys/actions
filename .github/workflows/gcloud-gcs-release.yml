# GitHub reusable workflow for uploading artifacts to Google Cloud Storage.

on:
  workflow_call:
    inputs:
      artifacts-name:
        description: Name of the artifacts to download
        required: false
        type: string
      from-path:
        description: Folder path (relative to working directory) to upload
        type: string
      header:
        description: Header to set when uploading files to GCS
        required: false
        type: string
      labels:
        description: Comma-delimited labels to match when searching for buckets to deploy to (i.e. "service=foo,environment=bar")
        required: false
        type: string
      project-id:
        description: Specific ID of the project that hosts the GCS bucket other than the project of the service account
        required: false
        type: string
      public:
        default: false
        description: Specifies if the uploaded files can be publicly accessed
        type: boolean
      service-account:
        description: GCP service account to impersonate by the current Workload Identity
        required: true
        type: string
      to-path:
        description: Path in GCS to upload the folder to
        type: string
      workload-identity-provider:
        description: Workload Identity Provider name, i.e. `projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider`
        required: true
        type: string
    outputs:
      console-url:
        description: URL to the uploaded artifacts on Google Cloud console
        value: ${{ jobs.release.outputs.console_url }}
      deployment-url:
        description: URL to the uploaded artifacts
        value: ${{ jobs.release.outputs.deployment_url }}
jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    outputs:
      console-url: ${{ steps.release.outputs.console-url }}
      deployment-url: ${{ steps.release.outputs.deployment-url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          token: ${{ github.token }}
      - name: Authenticate Google Cloud
        id: auth
        uses: google-github-actions/auth@v1
        with:
          service_account: ${{ inputs.service-account }}
          token_format: access_token
          workload_identity_provider: ${{ inputs.workload-identity-provider }}
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ inputs.project_id && inputs.project_id || steps.auth.outputs.project_id }}
      - name: Download artifacts
        if: ${{ inputs.artifacts-name }}
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.artifacts-name }}
          path: ${{ inputs.to-path }}
      - name: Release to Google Cloud Storage
        id: release
        env:
          LABELS: ${{ inputs.labels }}
          PROJECT_ID: ${{ inputs.project-id }}
          PUBLIC_ACL: ${{ inputs.public && 'true' || 'false' }}
        run: |-
          project_id=${PROJECT_ID:-$(gcloud config get-value project)}
          buckets=

          for bucket in $(gsutil ls); do
            for label in $(echo $LABELS | sed "s/,/ /g"); do
              read key val <<< $(IFS='='; echo $label)

              if ! gsutil label get $bucket | grep -q "\"${key}\": \"${val}\""; then
                continue 2
              fi
            done

            buckets=${buckets}${bucket},
          done

          from_path="${PWD}/${{ inputs.from-path }}*"
          to_path="${{ inputs.to-path }}"

          if [ ! -z $buckets ]; then
            for bucket in $(echo $buckets | sed "s/,/ /g")
            do
              if [ ! -z $bucket ]; then
                gsutil -m -h "${{ inputs.header }}" cp -Z -r ${from_path} ${bucket}${to_path}

                if [ $PUBLIC_ACL = "true" ]; then
                  gsutil acl ch -u AllUsers:R $bucket
                fi

                console_url="https://console.cloud.google.com/storage/browser/${bucket}${to_path}"
                deployment_url="gs://${bucket}${to_path}"

                echo "- Uploaded \`${from_path}\` to [\`${bucket}${to_path}\`]($console_url), url: [${deployment_url}](${deployment_url})" >> $GITHUB_STEP_SUMMARY
                echo "console-url=${console_url}" >> $GITHUB_OUTPUT
                echo "deployment-url=${deployment_url}" >> $GITHUB_OUTPUT
              fi
            done
          else
            echo "No GCS bucket(s) found, deployment skipped." >> $GITHUB_STEP_SUMMARY
          fi
