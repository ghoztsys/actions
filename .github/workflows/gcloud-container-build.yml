# GitHub reusable workflow for building, testing and pushing a container image
# to Google Artifact Registry or Google Container Registry.

on:
  workflow_call:
    inputs:
      artifacts-name:
        default: build-artifacts
        description: Artifacts name
        type: string
      artifacts-path:
        description: Artifacts path (relative to working directory)
        required: false
        type: string
      build-args:
        description: List of build-time variables
        required: false
        type: string # newline-delimited string
      build-secrets:
        description: List of build-time secrets
        required: false
        type: string # newline-delimited string
      file:
        default: Dockerfile
        description: Path to the Dockerfile (defaults to {context}/Dockerfile)
        type: string
      push:
        default: false
        description: Specifies if pushing image to registry
        type: boolean
      image-name:
        default: ${{ github.repository }}
        description: Docker image base name (excluding the GCP project ID and registry)
        type: string
      image-tag-suffix:
        description: Docker image tag suffix
        required: false
        type: string
      prebuild-command:
        description: Command for prebuilding
        required: false
        type: string
      registry:
        default: us-docker.pkg.dev
        description: Registry path (required if `push` is `true`, i.e. `<location>-docker.pkg.dev` for GAR or `gcr.io` for GCR)
        type: string
      service-account:
        description: GCP service account to impersonate by the current Workload Identity
        required: false
        type: string
      test-command:
        description: Command for running tests
        type: string
      test-report-path:
        description: Path to the test report
        required: false
        type: string
      test-reporter:
        description: Test reporter type
        required: false
        type: string
      workload-identity-provider:
        description: Workload Identity Provider name, i.e. `projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider`
        required: false
        type: string
    outputs:
      artifacts-name:
        description: Name of the uploaded artifacts
        value: ${{ jobs.build.outputs.artifacts-name }}
      artifacts-path:
        description: Path of the uploaded artifacts (relative to working directory)
        value: ${{ jobs.build.outputs.artifacts-path }}
      image:
        description: The built Docker image
        value: ${{ jobs.build.outputs.image }}
    secrets:
      github-token:
        description: GitHub personal access token to use when checking out private repositories
        required: false
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    permissions:
      checks: write
      contents: read
      id-token: write
    outputs:
      artifacts-name: ${{ inputs.artifacts-path && inputs.artifacts-name || '' }}
      artifacts-path: ${{ inputs.artifacts-path }}
      image: ${{ inputs.push && fromJSON(steps.metadata.outputs.json).tags[0] || '' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets.github-token && secrets.github-token || github.token }}
      - name: Prebuild
        if: ${{ inputs.prebuild-command }}
        run: ${{ inputs.prebuild-command }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Authenticate Google Cloud
        id: auth
        if: ${{ inputs.workload-identity-provider && inputs.service-account }}
        uses: google-github-actions/auth@v1
        with:
          service_account: ${{ inputs.service-account }}
          token_format: access_token
          workload_identity_provider: ${{ inputs.workload-identity-provider }}
      - name: Authenticate Docker registry
        if: ${{ steps.auth.outcome == 'success' }}
        uses: docker/login-action@v2
        with:
          password: ${{ steps.auth.outputs.access_token }}
          registry: ${{ inputs.registry }}
          username: oauth2accesstoken
      - name: Set up Google Cloud SDK
        if: ${{ steps.auth.outcome == 'success' }}
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ steps.auth.outputs.project_id }}
      - name: Build test target
        id: build-test
        if: ${{ inputs.test-command }}
        uses: docker/build-push-action@v4
        with:
          build-args: ${{ inputs.build-args }}
          cache-from: type=gha,scope=${{ github.workflow }}
          cache-to: type=gha,scope=${{ github.workflow }},mode=max
          context: .
          file: ${{ inputs.file }}
          load: true
          secrets: |
            ${{ secrets.github-token && format('GITHUB_TOKEN={0}', secrets.github-token) || '' }}
            ${{ inputs.build-secrets }}
          tags: ${{ inputs.image-name }}:test
          target: test
      - name: Run tests
        if: ${{ inputs.test-command }}
        run: IMAGE=${{ fromJSON(steps.build-test.outputs.metadata)['image.name'] }} ${{ inputs.test-command }}
      - name: Build prod target
        id: build-prod
        uses: docker/build-push-action@v4
        with:
          build-args: ${{ inputs.build-args }}
          cache-from: type=gha,scope=${{ github.workflow }}
          cache-to: type=gha,scope=${{ github.workflow }},mode=max
          context: .
          file: ${{ inputs.file }}
          load: true
          secrets: |
            ${{ secrets.github-token && format('GITHUB_TOKEN={0}', secrets.github-token) || '' }}
            ${{ inputs.build-secrets }}
          tags: ${{ inputs.image-name }}:prod
          target: prod
      - name: Set up release metadata
        if: ${{ inputs.push }}
        id: metadata
        uses: docker/metadata-action@v4
        with:
          images: ${{ format('{0}/', inputs.registry) || '' }}${{ steps.auth.outputs.project_id }}/${{ inputs.image-name }}
          tags: |
            type=ref,event=pr,suffix=${{ inputs.image-tag-suffix }}
            type=semver,pattern={{version}},suffix=${{ inputs.image-tag-suffix }}
            type=sha,prefix=,format=short,priority=1000,suffix=${{ inputs.image-tag-suffix }}
            type=raw,value=latest,suffix=${{ inputs.image-tag-suffix }}
      - name: Push release image to registry
        uses: docker/build-push-action@v4
        if: ${{ inputs.push }}
        with:
          build-args: ${{ inputs.build-args }}
          cache-from: type=gha,scope=${{ github.workflow }}
          cache-to: type=gha,scope=${{ github.workflow }},mode=max
          context: .
          file: ${{ inputs.file }}
          labels: ${{ steps.metadata.outputs.labels }}
          provenance: false
          push: true
          secrets: |
            ${{ secrets.github-token && format('GITHUB_TOKEN={0}', secrets.github-token) || '' }}
            ${{ inputs.build-secrets }}
          tags: ${{ steps.metadata.outputs.tags }}
      - name: Copy artifacts
        if: ${{ inputs.artifacts-path }}
        env:
          IMAGE: ${{ fromJSON(steps.build-prod.outputs.metadata)['image.name'] }}
        run: |-
          from_path="/var/app/${{ inputs.artifacts-path }}"
          to_path="${PWD}/${{ inputs.artifacts-path }}"
          process_name="tmp"

          echo "Copying files from ${IMAGE}... from=${from_path}, to=${to_path}"

          mkdir -p $to_path
          docker run -td --rm --name $process_name $IMAGE
          docker cp $process_name:$from_path $to_path
          docker stop $process_name

          echo "Copying files from ${IMAGE}... OK"
      - name: Upload artifacts
        if: ${{ inputs.artifacts-path }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.artifacts-name }}
          path: ${{ inputs.artifacts-path }}
      - name: Generate test report
        if: ${{ inputs.test-command && inputs.test-reporter }}
        uses: dorny/test-reporter@v1
        with:
          name: Test Report
          path: ${{ inputs.test-report-path }}
          reporter: ${{ inputs.test-reporter }}
      - name: Append summary
        if: ${{ inputs.push }}
        run: |-
          image=${{ fromJSON(steps.metadata.outputs.json).tags[0] }}
          echo "Pushed image [\`${image}\`](https://${image}) to registry \`${{ inputs.registry }}\`." >> $GITHUB_STEP_SUMMARY
