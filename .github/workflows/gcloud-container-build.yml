# GitHub reusable workflow for building, testing and pushing a container image
# to Google Artifact Registry or Google Container Registry.

on:
  workflow_call:
    inputs:
      build-artifact-dir:
        description: Directory of built files from the container to upload as artifact (relative to the container's working directory)
        required: false
        type: string # newline-delimited string for each path
      build-artifact-name:
        default: build-artifact
        description: Name of the built files artifact to be uploaded
        type: string
      build-artifact-working-dir:
        default: /var/app
        description: Working directory of the container to determine where to upload built files as artifact (absolute path with no trailing slash)
        type: string
      build-args:
        description: List of build-time arguments
        required: false
        type: string # newline-delimited string
      build-secrets:
        description: List of build-time secrets
        required: false
        type: string # newline-delimited string
      dockerfile-path:
        default: Dockerfile
        description: Path to the Dockerfile (relative to context, defaults to `Dockerfile`)
        type: string
      push:
        default: false
        description: Specifies if the built image should be pushed to the specified registry
        type: boolean
      image-name:
        default: ${{ github.repository }}
        description: Docker image base name (excluding the GCP project ID and registry)
        type: string
      image-tag-suffix:
        description: Docker image tag suffix
        required: false
        type: string
      registry:
        default: us-docker.pkg.dev
        description: Registry path (required if `push` is `true`, i.e. `<location>-docker.pkg.dev` for GAR or `gcr.io` for GCR)
        type: string
      service-account:
        description: GCP service account to impersonate by the current Workload Identity
        required: false
        type: string
      image-artifact-dir:
        description: Directory to upload the built image from (absolute or relative to working directory)
        type: string
        required: false
      image-artifact-name:
        default: image-artifact
        description: Name of the built image artifact to be uploaded
        type: string
      workload-identity-provider:
        description: Workload Identity Provider name, i.e. `projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider`
        required: false
        type: string
    outputs:
      build-artifact-name:
        description: Name of the uploaded artifact of built files
        value: ${{ inputs.build-artifact-dir && inputs.build-artifact-name || '' }}
      build-artifact-dir:
        description: Directory of the uploaded artifact of built files (relative to working directory)
        value: ${{ inputs.build-artifact-dir }}
      image:
        description: The built Docker image
        value: ${{ jobs.build.outputs.image }}
      image-artifact-dir:
        description: Directory of the uploaded artifact of the built image (absolute or relative to working directory)
        value: ${{ inputs.image-artifact-dir }}
      image-artifact-file:
        description: File of the uploaded artifact of the built image (absolute or relative to working directory)
        value: ${{ inputs.image-artifact-dir && format('{0}/{1}.tar', inputs.image-artifact-dir, inputs.image-artifact-name) || '' }}
      image-artifact-name:
        description: Name of the uploaded artifact of the built image
        value: ${{ inputs.image-artifact-dir && inputs.image-artifact-name || '' }}
    secrets:
      github-token:
        description: GitHub personal access token to use when checking out private repositories
        required: false
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    permissions:
      checks: write
      contents: read
      id-token: write
    outputs:
      image: ${{ fromJSON(steps.metadata.outputs.json).tags[0] }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets.github-token && secrets.github-token || github.token }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Authenticate Google Cloud
        id: auth
        if: ${{ inputs.workload-identity-provider && inputs.service-account }}
        uses: google-github-actions/auth@v1
        with:
          service_account: ${{ inputs.service-account }}
          token_format: access_token
          workload_identity_provider: ${{ inputs.workload-identity-provider }}
      - name: Authenticate Docker registry
        if: ${{ steps.auth.outcome == 'success' }}
        uses: docker/login-action@v2
        with:
          password: ${{ steps.auth.outputs.access_token }}
          registry: ${{ inputs.registry }}
          username: oauth2accesstoken
      - name: Set up Google Cloud SDK
        if: ${{ steps.auth.outcome == 'success' }}
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ steps.auth.outputs.project_id }}
      - name: Build prod target
        id: build-prod
        uses: docker/build-push-action@v4
        with:
          build-args: ${{ inputs.build-args }}
          cache-from: type=gha,scope=${{ github.workflow }}
          cache-to: type=gha,scope=${{ github.workflow }},mode=max
          context: .
          file: ${{ inputs.dockerfile-path }}
          outputs: type=docker,dest=${{ inputs.image-artifact-dir && format('{0}/{1}.tar', inputs.image-artifact-dir, inputs.image-artifact-name) || '' }}
          secrets: |
            ${{ secrets.github-token && format('GITHUB_TOKEN={0}', secrets.github-token) || '' }}
            ${{ inputs.build-secrets }}
          tags: ${{ inputs.image-name }}:prod
          target: prod
      - name: Set up release metadata
        id: metadata
        uses: docker/metadata-action@v4
        with:
          images: ${{ inputs.push && format('{0}/', inputs.registry) || '' }}${{ steps.auth.outcome == 'success' && format('{0}/', steps.auth.outputs.project_id) || '' }}${{ inputs.image-name }}
          tags: |
            type=ref,event=pr,suffix=${{ inputs.image-tag-suffix }}
            type=semver,pattern={{version}},suffix=${{ inputs.image-tag-suffix }}
            type=sha,prefix=,format=short,priority=1000,suffix=${{ inputs.image-tag-suffix }}
            type=raw,value=latest,suffix=${{ inputs.image-tag-suffix }}
      - name: Build release image
        id: build
        uses: docker/build-push-action@v4
        with:
          build-args: ${{ inputs.build-args }}
          cache-from: type=gha,scope=${{ github.workflow }}
          cache-to: type=gha,scope=${{ github.workflow }},mode=max
          context: .
          file: ${{ inputs.dockerfile-path }}
          labels: ${{ steps.metadata.outputs.labels }}
          provenance: false
          push: ${{ inputs.push }}
          secrets: |
            ${{ secrets.github-token && format('GITHUB_TOKEN={0}', secrets.github-token) || '' }}
            ${{ inputs.build-secrets }}
          tags: ${{ steps.metadata.outputs.tags }}
      - name: Copy build artifact
        if: ${{ inputs.build-artifact-dir }}
        env:
          IMAGE: ${{ fromJSON(steps.build.outputs.metadata)['image.name'] }}
        run: |-
          from_path="${{ inputs.build-artifact-working-dir }}/${{ inputs.build-artifact-dir }}"
          to_path="${PWD}/${{ inputs.build-artifact-dir }}"
          process_name="tmp"

          echo "Copying files from ${IMAGE}... from=${from_path}, to=${to_path}"

          mkdir -p $to_path
          docker run -td --rm --name $process_name $IMAGE
          docker cp $process_name:$from_path $to_path
          docker stop $process_name

          echo "Copying files from ${IMAGE}... OK"
      - name: Upload build artifact
        if: ${{ inputs.build-artifact-dir }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.build-artifact-name }}
          path: ${{ inputs.build-artifact-dir }}
      - name: Upload image artifact
        if: ${{ inputs.image-artifact-dir }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.image-artifact-name }}
          path: ${{ inputs.image-artifact-dir }}/${{ inputs.image-artifact-name }}.tar
      - name: Append summary
        if: ${{ inputs.push }}
        run: |-
          image=${{ fromJSON(steps.metadata.outputs.json).tags[0] }}
          echo "Pushed image [\`${image}\`](https://${image}) to registry \`${{ inputs.registry }}\`." >> $GITHUB_STEP_SUMMARY
