name: Build
description: Build and push a container image to Google Artifact Registry.
inputs:
  build-artifact-dir:
    description: Path to the built files directory in the container for artifact upload (newline-delimited string for each path, relative to the container's working directory)
    required: false
  build-artifact-name:
    default: build-artifact
    description: Name of the artifact containing the built files to be uploaded
  build-artifact-working-dir:
    default: /var/app
    description: Absolute path to the containerâ€™s working directory to set the upload location for built files (newline-delimited string, no trailing slash)
  build-args:
    description: List of build-time arguments
    required: false
  build-secrets:
    description: List of build-time secrets (newline-delimited string)
    required: false
  dockerfile-path:
    default: Dockerfile
    description: Path to the Dockerfile (relative to context, defaults to `Dockerfile`)
  github-token:
    description: GitHub personal access token for code checkout and passing as GITHUB_TOKEN to Docker during image build
    required: false
  push:
    default: 'false'
    description: Specifies if the built image should be pushed to the registry
  image-name:
    default: ${{ github.repository }}
    description: Docker image base name (excluding GCP project ID and registry)
  image-tag-suffix:
    description: Docker image tag suffix
    required: false
  namespace:
    description: Repository namespace, i.e. GAR repository name
    required: false
  registry:
    default: us-docker.pkg.dev
    description: Registry path (required if `push` is `true`, i.e. `<location>-docker.pkg.dev` for GAR or `gcr.io` for GCR)
  service-account:
    description: GCP service account to impersonate by the Workload Identity
    required: false
  image-artifact-dir:
    description: Path to the directory containing the built image for artifact upload (absolute or relative to working directory)
    required: false
  image-artifact-name:
    default: image-artifact
    description: Name of the artifact containing the built image to be uploaded
  workload-identity-provider:
    description: Workload Identity Provider name, i.e. `projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider`
    required: false
outputs:
  build-artifact-dir:
    description: Path to the directory of the uploaded artifact of built files (relative to working directory)
    value: ${{ inputs.build-artifact-dir }}
  build-artifact-name:
    description: Name of the uploaded artifact of built files
    value: ${{ inputs.build-artifact-dir && inputs.build-artifact-name || '' }}
  image:
    description: The full name of built Docker image, including the registry host, repository namespace, image name and tag (highest priority tag is used)
    value: ${{ fromJSON(steps.metadata.outputs.json).tags[0] }}
  image-artifact-dir:
    description: Path to the directory of the uploaded artifact of the built image (absolute or relative to working directory)
    value: ${{ inputs.image-artifact-dir }}
  image-artifact-file:
    description: Path to the uploaded artifact of the built image (absolute or relative to working directory)
    value: ${{ inputs.image-artifact-dir && format('{0}/{1}.tar', inputs.image-artifact-dir, inputs.image-artifact-name) || '' }}
  image-artifact-name:
    description: Name of the uploaded artifact of the built image
    value: ${{ inputs.image-artifact-dir && inputs.image-artifact-name || '' }}
  repository:
    description: Full path to the repository in the registry including the registry host
    value: ${{ inputs.push == 'true' && format('{0}/', inputs.registry) || '' }}${{ steps.auth.outcome == 'success' && format('{0}/', steps.auth.outputs.project_id) || '' }}${{ inputs.namespace && format('{0}', inputs.namespace) || '' }}
  version:
    description: The highest priority tag of the built Docker image
    value: ${{ steps.metadata.outputs.version }}
runs:
  using: composite
  steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive
        token: ${{ inputs.github-token && inputs.github-token || github.token }}
    - name: Authenticate Google Cloud
      id: auth
      if: ${{ inputs.workload-identity-provider && inputs.service-account }}
      uses: google-github-actions/auth@v2
      with:
        service_account: ${{ inputs.service-account }}
        token_format: access_token
        workload_identity_provider: ${{ inputs.workload-identity-provider }}
    - name: Authenticate Docker registry
      if: ${{ steps.auth.outcome == 'success' }}
      uses: docker/login-action@v3
      with:
        password: ${{ steps.auth.outputs.access_token }}
        registry: ${{ inputs.registry }}
        username: oauth2accesstoken
    - name: Set up Google Cloud SDK
      if: ${{ steps.auth.outcome == 'success' }}
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ steps.auth.outputs.project_id }}
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Set up metadata
      id: metadata
      uses: docker/metadata-action@v5
      with:
        images: ${{ inputs.push == 'true' && format('{0}/', inputs.registry) || '' }}${{ steps.auth.outcome == 'success' && format('{0}/', steps.auth.outputs.project_id) || '' }}${{ inputs.namespace && format('{0}/', inputs.namespace) || '' }}${{ inputs.image-name }}
        tags: |
          type=sha,prefix=,format=short,priority=1000,suffix=${{ inputs.image-tag-suffix }}
          type=semver,pattern={{version}},suffix=${{ inputs.image-tag-suffix }}
          type=ref,event=pr,suffix=${{ inputs.image-tag-suffix }}
          type=raw,value=latest,enable={{is_default_branch}},suffix=${{ inputs.image-tag-suffix }}
    - name: Extract SHA
      id: sha
      shell: bash
      run: |
        sha=$(echo '${{ steps.metadata.outputs.json }}' | jq -r '.labels."org.opencontainers.image.revision"')
        short_sha=${sha:0:7}
        echo "sha=${sha}" >> $GITHUB_OUTPUT
        echo "short_sha=${short_sha}" >> $GITHUB_OUTPUT
    - name: Build image
      id: build
      uses: docker/build-push-action@v5
      with:
        build-args: |
          ${{ inputs.build-args }}
          SHA=${{ steps.sha.outputs.sha }}
          SHORT_SHA=${{ steps.sha.outputs.short_sha }}
        cache-from: type=gha,scope=${{ github.workflow }}
        cache-to: type=gha,scope=${{ github.workflow }},mode=max
        context: .
        file: ${{ inputs.dockerfile-path }}
        labels: ${{ steps.metadata.outputs.labels }}
        outputs: ${{ inputs.push != 'true' && inputs.image-artifact-dir && format('type=docker,dest={0}/{1}.tar', inputs.image-artifact-dir, inputs.image-artifact-name) || '' }}
        provenance: false
        push: ${{ inputs.push == 'true' }}
        secrets: |
          ${{ inputs.github-token && format('GITHUB_TOKEN={0}', inputs.github-token) || '' }}
          ${{ inputs.build-secrets }}
        tags: ${{ steps.metadata.outputs.tags }}
    - name: Copy build artifact
      shell: bash
      if: ${{ inputs.build-artifact-dir }}
      env:
        IMAGE: ${{ fromJSON(steps.metadata.outputs.json).tags[0] }}
      run: |-
        from_path="${{ inputs.build-artifact-working-dir }}/${{ inputs.build-artifact-dir }}"
        to_path="${PWD}/${{ inputs.build-artifact-dir }}"
        process_name="tmp"

        echo "Copying files from ${IMAGE}... from=${from_path}, to=${to_path}"

        mkdir -p $to_path
        docker run -td --rm --name $process_name $IMAGE
        docker cp $process_name:$from_path $to_path
        docker stop $process_name

        echo "Copying files from ${IMAGE}... OK"
    - name: Upload build artifact
      if: ${{ inputs.build-artifact-dir }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.build-artifact-name }}
        path: ${{ inputs.build-artifact-dir }}
    - name: Upload image artifact
      if: ${{ inputs.image-artifact-dir }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.image-artifact-name }}
        path: ${{ inputs.image-artifact-dir }}/${{ inputs.image-artifact-name }}.tar
    - name: Generate summary
      shell: bash
      if: ${{ inputs.push == 'true' }}
      run: |-
        echo "Successfully pushed image with tags:" >> $GITHUB_STEP_SUMMARY
        echo '${{ steps.metadata.outputs.json }}' | jq -r '.tags[]' | while read tag; do
          echo "- [\`${tag}\`](https://${tag})" >> $GITHUB_STEP_SUMMARY
        done
