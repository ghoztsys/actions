# Required permissions:
#   contents: read
#   id-token: write

name: Deploy
description: Deploys a container image to Google Kubernetes Engine
inputs:
  cluster-labels:
    description: Comma-delimited labels to match when searching for clusters to deploy to (i.e. "service=foo,environment=bar")
    required: false
  cluster-region-zone:
    description: Specific region zone of the GKE cluster(s) to deploy to
    required: false
  k8s-container:
    description: Target Kubernetes container to update
    required: true
  k8s-deployment:
    description: Target Kubernetes deployment to update
    required: true
  k8s-namespace:
    default: default
    description: Target Kubernetes namespace where the deployment is located
  image:
    description: Docker image to deploy
    required: true
  service-account:
    description: Google Cloud service account to impersonate by the current Workload Identity
    required: true
  workload-identity-provider:
    description: Workload Identity Provider name, i.e. `projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider`
    required: true
outputs:
  console-url:
    description: URL of the last deployed Kubernetes cluster on Google Cloud console
    value: ${{ steps.deploy.outputs.console-url }}
  deployment-url:
    description: URL of the last deployed Kubernetes cluster
    value: ${{ steps.deploy.outputs.deployment-url }}
runs:
  using: composite
  steps:
    - name: Authenticate Google Cloud
      id: auth
      uses: google-github-actions/auth@v2
      with:
        service_account: ${{ inputs.service-account }}
        token_format: access_token
        workload_identity_provider: ${{ inputs.workload-identity-provider }}
    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        install_components: gke-gcloud-auth-plugin
        project_id: ${{ steps.auth.outputs.project_id }}
    - name: Deploy
      id: deploy
      shell: bash
      env:
        PROJECT_ID: ${{ steps.auth.outputs.project_id }}
        IMAGE: ${{ inputs.image }}
        K8S_CONTAINER: ${{ inputs.k8s-container }}
        K8S_DEPLOYMENT: ${{ inputs.k8s-deployment }}
        K8S_NAMESPACE: ${{ inputs.k8s-namespace }}
        LABELS: ${{ inputs.cluster-labels }}
        REGION_ZONE: ${{ inputs.cluster-region-zone }}
        USE_GKE_GCLOUD_AUTH_PLUGIN: "True"
      run: |-
        labels=($(echo $LABELS | sed "s/,/ /g"))
        filter=$(printf " AND nodeConfig.labels.%s" "${labels[@]}")
        clusters=$(gcloud container clusters list \
          $(if [ ! -z $REGION_ZONE ]; then echo "--zone $REGION_ZONE"; else echo ""; fi) \
          $(if [ ! -z $labels ]; then echo "--filter=${filter:5}"; else echo ""; fi) \
          | awk 'NR >= 2 {print $1 "|" $2 "|" $4}' \
          | sed -n -e 'H;${x;s/\n/,/g;s/^,//;p;}')

        if [ ! -z $clusters ]; then
          echo "Deployed Kubernetes cluster(s):" >> $GITHUB_STEP_SUMMARY

          for cluster in $(echo $clusters | sed "s/,/ /g")
          do
            if [ ! -z $cluster ]; then
              read name region_zone url <<< $(IFS='|'; echo $cluster)
              gcloud container clusters get-credentials $name --zone=$region_zone --quiet
              kubectl set image deployment/$K8S_DEPLOYMENT $K8S_CONTAINER=$IMAGE --namespace=$K8S_NAMESPACE

              console_url="https://console.cloud.google.com/kubernetes/clusters/details/${region_zone}/${name}?project=${PROJECT_ID}"

              echo "- [\`${name}\`](${console_url})" >> $GITHUB_STEP_SUMMARY
              echo "    - Endpoint: [\`${url}\`](https://${url})" >> $GITHUB_STEP_SUMMARY
              echo "    - Image: [\`${IMAGE}\`](https://${IMAGE})" >> $GITHUB_STEP_SUMMARY
              echo "    - Container: \`${K8S_CONTAINER}\`" >> $GITHUB_STEP_SUMMARY
              echo "    - Deployment: \`deployment/${K8S_DEPLOYMENT}\`" >> $GITHUB_STEP_SUMMARY
              echo "console-url=${console_url}" >> $GITHUB_OUTPUT
              echo "deployment-url=${url}" >> $GITHUB_OUTPUT
            fi
          done
        else
          echo "No Kubernetes cluster(s) found, deployment skipped." >> $GITHUB_STEP_SUMMARY
        fi
